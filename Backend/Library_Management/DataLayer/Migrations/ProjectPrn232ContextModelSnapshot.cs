// <auto-generated />
using System;
using DataLayer.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(ProjectPrn232Context))]
    partial class ProjectPrn232ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Entities.Author", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("author_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__authors__3213E83F45E5F6A6");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("AuthorId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("author_id");

                    b.Property<string>("CategoryId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<short?>("PublicationYear")
                        .HasColumnType("smallint")
                        .HasColumnName("publication_year");

                    b.Property<string>("PublisherId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("publisher_id");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__books__3213E83F961658F9");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.ToTable("books", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.BookCopy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("book_id");

                    b.Property<string>("BookshelfId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("bookshelf_id");

                    b.Property<string>("CopyCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("copy_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__book_cop__3213E83F25D02A04");

                    b.HasIndex("BookId");

                    b.HasIndex("BookshelfId");

                    b.HasIndex(new[] { "CopyCode" }, "UQ__book_cop__5196394F6914230C")
                        .IsUnique();

                    b.ToTable("book_copies", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.BookFavorite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("added_at")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("book_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__book_fav__3213E83F055FA27C");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("book_favorites", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.BookReservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("CopyId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("copy_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("ReservationDate")
                        .HasColumnType("date")
                        .HasColumnName("reservation_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__book_res__3213E83FE1B198C7");

                    b.HasIndex("CopyId");

                    b.HasIndex("UserId");

                    b.ToTable("book_reservations", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.BookReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("book_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("review_date")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<string>("ReviewText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("review_text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__book_rev__3213E83F10A2D67B");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("book_reviews", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.Bookshelf", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentCount")
                        .HasColumnType("int")
                        .HasColumnName("current_count");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Rack")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("rack");

                    b.Property<int>("ShelfNumber")
                        .HasColumnType("int")
                        .HasColumnName("shelf_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__bookshel__3213E83F254924B2");

                    b.HasIndex(new[] { "Rack", "ShelfNumber" }, "UQ_bookshelves_rack_shelf")
                        .IsUnique();

                    b.ToTable("bookshelves", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.BorrowRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<DateOnly>("BorrowDate")
                        .HasColumnType("date")
                        .HasColumnName("borrow_date");

                    b.Property<string>("CopyId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("copy_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<decimal>("Fine")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("fine");

                    b.Property<DateOnly?>("ReturnDate")
                        .HasColumnType("date")
                        .HasColumnName("return_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__borrow_r__3213E83F6ECCAA08");

                    b.HasIndex("CopyId");

                    b.HasIndex("UserId");

                    b.ToTable("borrow_records", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__categori__3213E83FBB1165BA");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateOnly>("EventDate")
                        .HasColumnType("date")
                        .HasColumnName("event_date");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("event_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__events__3213E83F433374A8");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.Publisher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("publisher_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__publishe__3213E83F7237A8CE");

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__roles__3213E83F9E4EC569");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<int?>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("RoleId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PK__users__3213E83F4305DF6D");

                    b.HasIndex("RoleId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DataLayer.Entities.Book", b =>
                {
                    b.HasOne("DataLayer.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_books_authors");

                    b.HasOne("DataLayer.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_books_categories");

                    b.HasOne("DataLayer.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .HasConstraintName("FK_books_publishers");

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DataLayer.Entities.BookCopy", b =>
                {
                    b.HasOne("DataLayer.Entities.Book", "Book")
                        .WithMany("BookCopies")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_book_copies_books");

                    b.HasOne("DataLayer.Entities.Bookshelf", "Bookshelf")
                        .WithMany("BookCopies")
                        .HasForeignKey("BookshelfId")
                        .HasConstraintName("FK_book_copies_bookshelves");

                    b.Navigation("Book");

                    b.Navigation("Bookshelf");
                });

            modelBuilder.Entity("DataLayer.Entities.BookFavorite", b =>
                {
                    b.HasOne("DataLayer.Entities.Book", "Book")
                        .WithMany("BookFavorites")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_book_favorites_books");

                    b.HasOne("DataLayer.Entities.User", "User")
                        .WithMany("BookFavorites")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_book_favorites_users");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.BookReservation", b =>
                {
                    b.HasOne("DataLayer.Entities.BookCopy", "Copy")
                        .WithMany("BookReservations")
                        .HasForeignKey("CopyId")
                        .IsRequired()
                        .HasConstraintName("FK_book_reservations_book_copies");

                    b.HasOne("DataLayer.Entities.User", "User")
                        .WithMany("BookReservations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_book_reservations_users");

                    b.Navigation("Copy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.BookReview", b =>
                {
                    b.HasOne("DataLayer.Entities.Book", "Book")
                        .WithMany("BookReviews")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_book_reviews_books");

                    b.HasOne("DataLayer.Entities.User", "User")
                        .WithMany("BookReviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_book_reviews_users");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.BorrowRecord", b =>
                {
                    b.HasOne("DataLayer.Entities.BookCopy", "Copy")
                        .WithMany("BorrowRecords")
                        .HasForeignKey("CopyId")
                        .IsRequired()
                        .HasConstraintName("FK_borrow_records_book_copies");

                    b.HasOne("DataLayer.Entities.User", "User")
                        .WithMany("BorrowRecords")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_borrow_records_users");

                    b.Navigation("Copy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.HasOne("DataLayer.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_users_roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataLayer.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataLayer.Entities.Book", b =>
                {
                    b.Navigation("BookCopies");

                    b.Navigation("BookFavorites");

                    b.Navigation("BookReviews");
                });

            modelBuilder.Entity("DataLayer.Entities.BookCopy", b =>
                {
                    b.Navigation("BookReservations");

                    b.Navigation("BorrowRecords");
                });

            modelBuilder.Entity("DataLayer.Entities.Bookshelf", b =>
                {
                    b.Navigation("BookCopies");
                });

            modelBuilder.Entity("DataLayer.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataLayer.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataLayer.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.Navigation("BookFavorites");

                    b.Navigation("BookReservations");

                    b.Navigation("BookReviews");

                    b.Navigation("BorrowRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
